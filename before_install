#!/bin/sh
set -e

# Directories.
root_dir=`pwd`

if [ -d debian ]; then
    build_dir="/tmp/_travis/build"
    install_dir="/tmp/_travis/install"
else
    build_dir="$root_dir/_travis/build"
    install_dir="$root_dir/_travis/install"
fi

echo "root_dir: " $root_dir
echo "build_dir: " $build_dir
echo "install_dir: " $install_dir

# Create layout.
rm -rf "$build_dir" "$install_dir"
mkdir -p "$build_dir"
mkdir -p "$install_dir"

# Setup Git identity.
git config --global user.name "Thomas Moulard (Travis Automatic Builds)"
git config --global user.email "thomas.moulard+travis@gmail.com"

# Retrive the submodules.
git submodule update --init --recursive

# Speed up apt
sudo sh -c "echo \"force-unsafe-io\" > /etc/dpkg/dpkg.cfg.d/02apt-speedup"

# Update the apt local cache.
sudo apt-get update -qq


# build_git_dependency
# --------------------
#
# Build a dependency directly from the Git development tree.
build_git_dependency()
{
    echo "--> Compiling $1"
    mkdir -p "$build_dir/$1"
    cd "$build_dir"
    $git_clone "git://github.com/$1" "$1"
    cd "$build_dir/$1"
    cmake . -DCMAKE_INSTALL_PREFIX:STRING="$install_dir"
    make install
}

# Check if we are in a debian branch...
if [ -d debian ]; then
    if `test x${DIST} = x`; then
	echo "distribution is not set, skipping this build"
	exit 0
    fi
    echo "Target distribution: ${DIST}"

    # Fetch tags to compute the distance between the last release tag
    # and us.
    git fetch --quiet --tags

    # If we are, we install Debian package development tools and
    # create a sid pbuilder. Package dependencies will be installed
    # automatically.
    sudo apt-get install -qq			\
	debootstrap devscripts			\
	git-buildpackage debian-archive-keyring \
	pkg-kde-tools dput eatmydata ccache

    # Fix ccache use in pbuilder
    sudo addgroup --system --gid 1234 ccache
    sudo adduser --quiet --system --uid 1234 --ingroup ccache \
	--home /var/cache/pbuilder --no-create-home pbuilder
    sudo mkdir -p /var/cache/pbuilder/ccache
    sudo chown -R pbuilder:ccache /var/cache/pbuilder/ccache
    sudo chmod -R g+ws /var/cache/pbuilder/ccache

    # Remove previous sandbox.
    sudo rm -rf /var/cache/pbuilder/base-${DIST}.cow || true

    # Create a pbuilder sandbox.
    cp -f $root_dir/.travis/pbuilderrc $HOME/.pbuilderrc
    sed -i "s|@DIST@|${DIST}|g" $HOME/.pbuilderrc

    git-pbuilder create

    # Speed up pbuilder.
    echo "echo \"force-unsafe-io\" > /etc/dpkg/dpkg.cfg.d/02apt-speedup" | \
	git-pbuilder login --save-after-exec

    # Add additional PPAs
    for ppa in ${DEBIAN_PPA}; do
	echo "apt-add-repository ppa:${ppa}" | \
	    git-pbuilder login --save-after-exec
    done

    # Retrieve PPA package list.
    git-pbuilder update

    # ccache is not necessary in our case and may cause permission
    # issues.
    echo "apt-get -y remove ccache" |			\
	git-pbuilder login --save-after-exec
else
    if [ ! x${DIST} = x ]; then
	echo "skipping this build"
	exit 0
    fi
    # Add additional PPAs
    for ppa in ${MASTER_PPA}; do
	sudo apt-add-repository ppa:${ppa}
    done

    # ...otherwise we install the dependencies explicitly.
    sudo apt-get install -qq ${APT_DEPENDENCIES}
    sudo pip install cpp-coveralls --use-mirrors

    # and we build directly dependencies from the Git repository
    for package in ${GIT_DEPENDENCIES}; do
	build_git_dependency "$package"
    done
fi
